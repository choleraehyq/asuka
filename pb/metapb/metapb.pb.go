// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metapb/metapb.proto

/*
	Package metapb is a generated protocol buffer package.

	It is generated from these files:
		metapb/metapb.proto

	It has these top-level messages:
		GetLatestTermReq
		GetLatestTermResp
		CreateGroupReq
		CreateGroupResp
		JoinReq
		JoinResp
		HeartbeatReq
		HeartbeatResp
		QueryLocationReq
		QueryLocationResp
		UpgradeLearnerReq
		UpgradeLearnerResp
*/
package metapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import configpb "github.com/choleraehyq/asuka/pb/configpb"
import errorpb "github.com/choleraehyq/asuka/pb/errorpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLatestTermReq struct {
	Address  string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Configno configpb.ConfigNo `protobuf:"bytes,2,opt,name=configno" json:"configno"`
}

func (m *GetLatestTermReq) Reset()                    { *m = GetLatestTermReq{} }
func (m *GetLatestTermReq) String() string            { return proto.CompactTextString(m) }
func (*GetLatestTermReq) ProtoMessage()               {}
func (*GetLatestTermReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{0} }

func (m *GetLatestTermReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetLatestTermReq) GetConfigno() configpb.ConfigNo {
	if m != nil {
		return m.Configno
	}
	return configpb.ConfigNo{}
}

type GetLatestTermResp struct {
	GroupInfo configpb.GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo" json:"group_info"`
	Error     *errorpb.Error     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetLatestTermResp) Reset()                    { *m = GetLatestTermResp{} }
func (m *GetLatestTermResp) String() string            { return proto.CompactTextString(m) }
func (*GetLatestTermResp) ProtoMessage()               {}
func (*GetLatestTermResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{1} }

func (m *GetLatestTermResp) GetGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return configpb.GroupInfo{}
}

func (m *GetLatestTermResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type CreateGroupReq struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *CreateGroupReq) Reset()                    { *m = CreateGroupReq{} }
func (m *CreateGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupReq) ProtoMessage()               {}
func (*CreateGroupReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{2} }

func (m *CreateGroupReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type CreateGroupResp struct {
	GroupInfo configpb.GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo" json:"group_info"`
}

func (m *CreateGroupResp) Reset()                    { *m = CreateGroupResp{} }
func (m *CreateGroupResp) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResp) ProtoMessage()               {}
func (*CreateGroupResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{3} }

func (m *CreateGroupResp) GetGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return configpb.GroupInfo{}
}

type JoinReq struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *JoinReq) Reset()                    { *m = JoinReq{} }
func (m *JoinReq) String() string            { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()               {}
func (*JoinReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{4} }

func (m *JoinReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type JoinResp struct {
}

func (m *JoinResp) Reset()                    { *m = JoinResp{} }
func (m *JoinResp) String() string            { return proto.CompactTextString(m) }
func (*JoinResp) ProtoMessage()               {}
func (*JoinResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{5} }

type HeartbeatReq struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *HeartbeatReq) Reset()                    { *m = HeartbeatReq{} }
func (m *HeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatReq) ProtoMessage()               {}
func (*HeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{6} }

func (m *HeartbeatReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type HeartbeatResp struct {
}

func (m *HeartbeatResp) Reset()                    { *m = HeartbeatResp{} }
func (m *HeartbeatResp) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResp) ProtoMessage()               {}
func (*HeartbeatResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{7} }

type QueryLocationReq struct {
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (m *QueryLocationReq) Reset()                    { *m = QueryLocationReq{} }
func (m *QueryLocationReq) String() string            { return proto.CompactTextString(m) }
func (*QueryLocationReq) ProtoMessage()               {}
func (*QueryLocationReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{8} }

func (m *QueryLocationReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type QueryLocationResp struct {
	GroupInfo configpb.GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo" json:"group_info"`
}

func (m *QueryLocationResp) Reset()                    { *m = QueryLocationResp{} }
func (m *QueryLocationResp) String() string            { return proto.CompactTextString(m) }
func (*QueryLocationResp) ProtoMessage()               {}
func (*QueryLocationResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{9} }

func (m *QueryLocationResp) GetGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return configpb.GroupInfo{}
}

type UpgradeLearnerReq struct {
	Addr     string             `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	ConfigNo *configpb.ConfigNo `protobuf:"bytes,2,opt,name=config_no,json=configNo" json:"config_no,omitempty"`
}

func (m *UpgradeLearnerReq) Reset()                    { *m = UpgradeLearnerReq{} }
func (m *UpgradeLearnerReq) String() string            { return proto.CompactTextString(m) }
func (*UpgradeLearnerReq) ProtoMessage()               {}
func (*UpgradeLearnerReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{10} }

func (m *UpgradeLearnerReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *UpgradeLearnerReq) GetConfigNo() *configpb.ConfigNo {
	if m != nil {
		return m.ConfigNo
	}
	return nil
}

type UpgradeLearnerResp struct {
}

func (m *UpgradeLearnerResp) Reset()                    { *m = UpgradeLearnerResp{} }
func (m *UpgradeLearnerResp) String() string            { return proto.CompactTextString(m) }
func (*UpgradeLearnerResp) ProtoMessage()               {}
func (*UpgradeLearnerResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{11} }

func init() {
	proto.RegisterType((*GetLatestTermReq)(nil), "metapb.GetLatestTermReq")
	proto.RegisterType((*GetLatestTermResp)(nil), "metapb.GetLatestTermResp")
	proto.RegisterType((*CreateGroupReq)(nil), "metapb.CreateGroupReq")
	proto.RegisterType((*CreateGroupResp)(nil), "metapb.CreateGroupResp")
	proto.RegisterType((*JoinReq)(nil), "metapb.JoinReq")
	proto.RegisterType((*JoinResp)(nil), "metapb.JoinResp")
	proto.RegisterType((*HeartbeatReq)(nil), "metapb.HeartbeatReq")
	proto.RegisterType((*HeartbeatResp)(nil), "metapb.HeartbeatResp")
	proto.RegisterType((*QueryLocationReq)(nil), "metapb.QueryLocationReq")
	proto.RegisterType((*QueryLocationResp)(nil), "metapb.QueryLocationResp")
	proto.RegisterType((*UpgradeLearnerReq)(nil), "metapb.UpgradeLearnerReq")
	proto.RegisterType((*UpgradeLearnerResp)(nil), "metapb.UpgradeLearnerResp")
}
func (m *GetLatestTermReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestTermReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.Configno.Size()))
	n1, err := m.Configno.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *GetLatestTermResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestTermResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupInfo.Size()))
	n2, err := m.GroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CreateGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	return i, nil
}

func (m *CreateGroupResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupInfo.Size()))
	n4, err := m.GroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *JoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *JoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	return i, nil
}

func (m *HeartbeatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueryLocationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	return i, nil
}

func (m *QueryLocationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupInfo.Size()))
	n5, err := m.GroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *UpgradeLearnerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeLearnerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.ConfigNo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(m.ConfigNo.Size()))
		n6, err := m.ConfigNo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *UpgradeLearnerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeLearnerResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMetapb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetLatestTermReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	l = m.Configno.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *GetLatestTermResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *CreateGroupReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *CreateGroupResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *JoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *JoinResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HeartbeatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *HeartbeatResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueryLocationReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *QueryLocationResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *UpgradeLearnerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	if m.ConfigNo != nil {
		l = m.ConfigNo.Size()
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *UpgradeLearnerResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovMetapb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetapb(x uint64) (n int) {
	return sovMetapb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetLatestTermReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestTermReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestTermReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configno", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Configno.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestTermResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestTermResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestTermResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeLearnerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeLearnerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeLearnerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigNo == nil {
				m.ConfigNo = &configpb.ConfigNo{}
			}
			if err := m.ConfigNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeLearnerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeLearnerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeLearnerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetapb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetapb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetapb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetapb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetapb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetapb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metapb/metapb.proto", fileDescriptorMetapb) }

var fileDescriptorMetapb = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xbf, 0x2f, 0xb4, 0xc9, 0x0d, 0xcd, 0xcf, 0x34, 0x40, 0x6a, 0x89, 0x50, 0x0d, 0x2c,
	0x8a, 0x10, 0xb1, 0x08, 0x20, 0x58, 0xb1, 0x68, 0x41, 0xe1, 0x27, 0x8d, 0x44, 0x00, 0x89, 0x5d,
	0x35, 0x4e, 0x6e, 0x1c, 0x0b, 0xe2, 0x99, 0xce, 0x4c, 0x90, 0xfa, 0x04, 0xbc, 0x02, 0x8f, 0xd4,
	0x65, 0x9f, 0x00, 0x41, 0x78, 0x11, 0xe4, 0xb1, 0x27, 0x89, 0xd3, 0xa6, 0x2c, 0xba, 0x9a, 0x9f,
	0x7b, 0xce, 0xbd, 0xf7, 0xcc, 0xb9, 0x36, 0x6c, 0x4f, 0x50, 0x33, 0xe1, 0x7b, 0xc9, 0xd2, 0x12,
	0x92, 0x6b, 0x4e, 0x36, 0x92, 0x93, 0xfb, 0x30, 0x08, 0xf5, 0x78, 0xea, 0xb7, 0x06, 0x7c, 0xe2,
	0x05, 0x3c, 0xe0, 0x9e, 0x09, 0xfb, 0xd3, 0x91, 0x39, 0x99, 0x83, 0xd9, 0x25, 0x34, 0xf7, 0xd9,
	0x12, 0x7c, 0x30, 0xe6, 0x5f, 0x51, 0x32, 0x1c, 0x9f, 0x1c, 0x7b, 0x4c, 0x4d, 0xbf, 0x30, 0x4f,
	0xf8, 0xde, 0x80, 0x47, 0xa3, 0x30, 0x58, 0xda, 0xa4, 0xc4, 0xa7, 0xff, 0x22, 0xa2, 0x94, 0x5c,
	0x2e, 0xd6, 0x84, 0x46, 0x7d, 0xa8, 0x76, 0x50, 0x77, 0x99, 0x46, 0xa5, 0x3f, 0xa2, 0x9c, 0xf4,
	0xf1, 0x98, 0x34, 0x60, 0x93, 0x0d, 0x87, 0x12, 0x95, 0x6a, 0x38, 0xbb, 0xce, 0x5e, 0xb1, 0x6f,
	0x8f, 0xe4, 0x09, 0x14, 0x92, 0xb2, 0x11, 0x6f, 0xfc, 0xb7, 0xeb, 0xec, 0x95, 0xda, 0xa4, 0x35,
	0xef, 0xe3, 0xc0, 0x6c, 0x7a, 0x7c, 0x3f, 0x7f, 0xfa, 0xf3, 0x4e, 0xae, 0x3f, 0x47, 0x52, 0x05,
	0xb5, 0x95, 0x1a, 0x4a, 0x90, 0xe7, 0x00, 0x81, 0xe4, 0x53, 0x71, 0x14, 0x46, 0x23, 0x6e, 0xea,
	0x94, 0xda, 0xdb, 0x8b, 0x64, 0x9d, 0x38, 0xf6, 0x26, 0x1a, 0xd9, 0x6c, 0xc5, 0xc0, 0x5e, 0x90,
	0x7b, 0x70, 0xcd, 0x68, 0x48, 0x3b, 0x28, 0xb7, 0xac, 0xa2, 0x57, 0xf1, 0xda, 0x4f, 0x82, 0xf4,
	0x01, 0x94, 0x0f, 0x24, 0x32, 0x8d, 0x26, 0x53, 0x2c, 0x6b, 0x07, 0x0a, 0x69, 0xc5, 0xa1, 0xd5,
	0x95, 0x24, 0x1d, 0xd2, 0x77, 0x50, 0xc9, 0x80, 0xaf, 0xd2, 0x1f, 0xbd, 0x0b, 0x9b, 0x6f, 0x79,
	0x18, 0x5d, 0xfa, 0x92, 0x14, 0xa0, 0x90, 0x80, 0x94, 0xa0, 0x14, 0xae, 0xbf, 0x46, 0x26, 0xb5,
	0x8f, 0x4c, 0xc7, 0x2c, 0x02, 0xf9, 0x18, 0x96, 0x52, 0xcc, 0x9e, 0x56, 0x60, 0x6b, 0x09, 0xa3,
	0x04, 0x7d, 0x04, 0xd5, 0xf7, 0x53, 0x94, 0x27, 0x5d, 0x3e, 0x60, 0x3a, 0xe4, 0xa6, 0xdc, 0x6d,
	0xdb, 0x73, 0xc4, 0x26, 0x98, 0xd2, 0x93, 0xc6, 0x7a, 0x6c, 0x82, 0xf4, 0x10, 0x6a, 0x2b, 0x94,
	0x2b, 0xe9, 0xfc, 0x0c, 0xb5, 0x4f, 0x22, 0x90, 0x6c, 0x88, 0x5d, 0x64, 0x32, 0x42, 0xb9, 0xa6,
	0x77, 0xe2, 0x41, 0x31, 0xc9, 0x77, 0x74, 0xd9, 0xd8, 0xd8, 0x81, 0xe9, 0x71, 0x5a, 0x07, 0xb2,
	0x9a, 0x59, 0x89, 0xf6, 0xf7, 0xff, 0xa1, 0x74, 0x88, 0x9a, 0x7d, 0x40, 0xf9, 0x2d, 0x1c, 0x20,
	0x79, 0x09, 0x5b, 0x99, 0xb1, 0x22, 0x8d, 0x56, 0xfa, 0x05, 0xae, 0x4e, 0xb4, 0xbb, 0xb3, 0x26,
	0xa2, 0x04, 0x79, 0x01, 0xa5, 0x25, 0xeb, 0xc9, 0x4d, 0x8b, 0xcc, 0x0e, 0x8f, 0x7b, 0xeb, 0xc2,
	0x7b, 0x25, 0xc8, 0x7d, 0xc8, 0xc7, 0x46, 0x92, 0x8a, 0x05, 0xa4, 0xde, 0xbb, 0xd5, 0xec, 0x85,
	0x79, 0xea, 0xe2, 0xdc, 0x43, 0x52, 0xb7, 0xe1, 0x65, 0xeb, 0xdd, 0x1b, 0x17, 0xdc, 0x2a, 0x11,
	0x4b, 0xcd, 0x38, 0xb7, 0x90, 0xba, 0x3a, 0x03, 0x0b, 0xa9, 0xe7, 0xad, 0xee, 0x40, 0x39, 0xfb,
	0xac, 0x64, 0x0e, 0x3e, 0x67, 0xa4, 0xeb, 0xae, 0x0b, 0x29, 0xb1, 0x5f, 0x3f, 0xfb, 0xdd, 0xcc,
	0x9d, 0xce, 0x9a, 0xce, 0xd9, 0xac, 0xe9, 0xfc, 0x9a, 0x35, 0x9d, 0x1f, 0x7f, 0x9a, 0x39, 0x7f,
	0xc3, 0xfc, 0x51, 0x1e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x53, 0x7e, 0xd5, 0x35, 0x0f, 0x05,
	0x00, 0x00,
}
