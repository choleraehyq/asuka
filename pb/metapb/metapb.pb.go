// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metapb/metapb.proto

/*
	Package metapb is a generated protocol buffer package.

	It is generated from these files:
		metapb/metapb.proto

	It has these top-level messages:
		GetLatestTermReq
		GetLatestTermResp
		JoinReq
		JoinResp
		NeedSplitReq
		NeedSplitResp
		DoSplitReq
		DoSplitResp
		ConfChangeReq
		ConfChangeResp
		QueryLocationReq
		QueryLocationResp
*/
package metapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import configpb "configpb"
import errorpb "errorpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfChangeType int32

const (
	ADD_SECONDARY    ConfChangeType = 0
	REMOVE_SECONDARY ConfChangeType = 1
	CHANGE_PRIMARY   ConfChangeType = 2
)

var ConfChangeType_name = map[int32]string{
	0: "ADD_SECONDARY",
	1: "REMOVE_SECONDARY",
	2: "CHANGE_PRIMARY",
}
var ConfChangeType_value = map[string]int32{
	"ADD_SECONDARY":    0,
	"REMOVE_SECONDARY": 1,
	"CHANGE_PRIMARY":   2,
}

func (x ConfChangeType) String() string {
	return proto.EnumName(ConfChangeType_name, int32(x))
}
func (ConfChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{0} }

type GetLatestTermReq struct {
	Address configpb.NodeAddress `protobuf:"bytes,1,opt,name=address" json:"address"`
}

func (m *GetLatestTermReq) Reset()                    { *m = GetLatestTermReq{} }
func (m *GetLatestTermReq) String() string            { return proto.CompactTextString(m) }
func (*GetLatestTermReq) ProtoMessage()               {}
func (*GetLatestTermReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{0} }

func (m *GetLatestTermReq) GetAddress() configpb.NodeAddress {
	if m != nil {
		return m.Address
	}
	return configpb.NodeAddress{}
}

type GetLatestTermResp struct {
	GroupInfo configpb.GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo" json:"group_info"`
	Error     *errorpb.Error     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetLatestTermResp) Reset()                    { *m = GetLatestTermResp{} }
func (m *GetLatestTermResp) String() string            { return proto.CompactTextString(m) }
func (*GetLatestTermResp) ProtoMessage()               {}
func (*GetLatestTermResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{1} }

func (m *GetLatestTermResp) GetGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return configpb.GroupInfo{}
}

func (m *GetLatestTermResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type JoinReq struct {
	Address configpb.NodeAddress `protobuf:"bytes,1,opt,name=address" json:"address"`
}

func (m *JoinReq) Reset()                    { *m = JoinReq{} }
func (m *JoinReq) String() string            { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()               {}
func (*JoinReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{2} }

func (m *JoinReq) GetAddress() configpb.NodeAddress {
	if m != nil {
		return m.Address
	}
	return configpb.NodeAddress{}
}

type JoinResp struct {
	GroupInfo configpb.GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo" json:"group_info"`
}

func (m *JoinResp) Reset()                    { *m = JoinResp{} }
func (m *JoinResp) String() string            { return proto.CompactTextString(m) }
func (*JoinResp) ProtoMessage()               {}
func (*JoinResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{3} }

func (m *JoinResp) GetGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return configpb.GroupInfo{}
}

type NeedSplitReq struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
}

func (m *NeedSplitReq) Reset()                    { *m = NeedSplitReq{} }
func (m *NeedSplitReq) String() string            { return proto.CompactTextString(m) }
func (*NeedSplitReq) ProtoMessage()               {}
func (*NeedSplitReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{4} }

func (m *NeedSplitReq) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

type NeedSplitResp struct {
	NewNode []configpb.NodeAddress `protobuf:"bytes,1,rep,name=new_node,json=newNode" json:"new_node"`
}

func (m *NeedSplitResp) Reset()                    { *m = NeedSplitResp{} }
func (m *NeedSplitResp) String() string            { return proto.CompactTextString(m) }
func (*NeedSplitResp) ProtoMessage()               {}
func (*NeedSplitResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{5} }

func (m *NeedSplitResp) GetNewNode() []configpb.NodeAddress {
	if m != nil {
		return m.NewNode
	}
	return nil
}

type DoSplitReq struct {
	GroupNo  configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	SplitKey []byte            `protobuf:"bytes,2,opt,name=split_key,json=splitKey,proto3" json:"split_key,omitempty"`
}

func (m *DoSplitReq) Reset()                    { *m = DoSplitReq{} }
func (m *DoSplitReq) String() string            { return proto.CompactTextString(m) }
func (*DoSplitReq) ProtoMessage()               {}
func (*DoSplitReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{6} }

func (m *DoSplitReq) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *DoSplitReq) GetSplitKey() []byte {
	if m != nil {
		return m.SplitKey
	}
	return nil
}

type DoSplitResp struct {
	Error errorpb.Error `protobuf:"bytes,1,opt,name=error" json:"error"`
}

func (m *DoSplitResp) Reset()                    { *m = DoSplitResp{} }
func (m *DoSplitResp) String() string            { return proto.CompactTextString(m) }
func (*DoSplitResp) ProtoMessage()               {}
func (*DoSplitResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{7} }

func (m *DoSplitResp) GetError() errorpb.Error {
	if m != nil {
		return m.Error
	}
	return errorpb.Error{}
}

type ConfChangeReq struct {
	NewGroupInfo configpb.GroupInfo `protobuf:"bytes,2,opt,name=new_group_info,json=newGroupInfo" json:"new_group_info"`
	Type         ConfChangeType     `protobuf:"varint,3,opt,name=type,proto3,enum=metapb.ConfChangeType" json:"type,omitempty"`
}

func (m *ConfChangeReq) Reset()                    { *m = ConfChangeReq{} }
func (m *ConfChangeReq) String() string            { return proto.CompactTextString(m) }
func (*ConfChangeReq) ProtoMessage()               {}
func (*ConfChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{8} }

func (m *ConfChangeReq) GetNewGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.NewGroupInfo
	}
	return configpb.GroupInfo{}
}

func (m *ConfChangeReq) GetType() ConfChangeType {
	if m != nil {
		return m.Type
	}
	return ADD_SECONDARY
}

type ConfChangeResp struct {
	NewGroupInfo configpb.GroupInfo `protobuf:"bytes,2,opt,name=new_group_info,json=newGroupInfo" json:"new_group_info"`
}

func (m *ConfChangeResp) Reset()                    { *m = ConfChangeResp{} }
func (m *ConfChangeResp) String() string            { return proto.CompactTextString(m) }
func (*ConfChangeResp) ProtoMessage()               {}
func (*ConfChangeResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{9} }

func (m *ConfChangeResp) GetNewGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.NewGroupInfo
	}
	return configpb.GroupInfo{}
}

type QueryLocationReq struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryLocationReq) Reset()                    { *m = QueryLocationReq{} }
func (m *QueryLocationReq) String() string            { return proto.CompactTextString(m) }
func (*QueryLocationReq) ProtoMessage()               {}
func (*QueryLocationReq) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{10} }

func (m *QueryLocationReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type QueryLocationResp struct {
	GroupInfo configpb.GroupInfo `protobuf:"bytes,1,opt,name=group_info,json=groupInfo" json:"group_info"`
}

func (m *QueryLocationResp) Reset()                    { *m = QueryLocationResp{} }
func (m *QueryLocationResp) String() string            { return proto.CompactTextString(m) }
func (*QueryLocationResp) ProtoMessage()               {}
func (*QueryLocationResp) Descriptor() ([]byte, []int) { return fileDescriptorMetapb, []int{11} }

func (m *QueryLocationResp) GetGroupInfo() configpb.GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return configpb.GroupInfo{}
}

func init() {
	proto.RegisterType((*GetLatestTermReq)(nil), "metapb.GetLatestTermReq")
	proto.RegisterType((*GetLatestTermResp)(nil), "metapb.GetLatestTermResp")
	proto.RegisterType((*JoinReq)(nil), "metapb.JoinReq")
	proto.RegisterType((*JoinResp)(nil), "metapb.JoinResp")
	proto.RegisterType((*NeedSplitReq)(nil), "metapb.NeedSplitReq")
	proto.RegisterType((*NeedSplitResp)(nil), "metapb.NeedSplitResp")
	proto.RegisterType((*DoSplitReq)(nil), "metapb.DoSplitReq")
	proto.RegisterType((*DoSplitResp)(nil), "metapb.DoSplitResp")
	proto.RegisterType((*ConfChangeReq)(nil), "metapb.ConfChangeReq")
	proto.RegisterType((*ConfChangeResp)(nil), "metapb.ConfChangeResp")
	proto.RegisterType((*QueryLocationReq)(nil), "metapb.QueryLocationReq")
	proto.RegisterType((*QueryLocationResp)(nil), "metapb.QueryLocationResp")
	proto.RegisterEnum("metapb.ConfChangeType", ConfChangeType_name, ConfChangeType_value)
}
func (m *GetLatestTermReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestTermReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.Address.Size()))
	n1, err := m.Address.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *GetLatestTermResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestTermResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupInfo.Size()))
	n2, err := m.GroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *JoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.Address.Size()))
	n4, err := m.Address.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *JoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupInfo.Size()))
	n5, err := m.GroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *NeedSplitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeedSplitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupNo.Size()))
	n6, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *NeedSplitResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeedSplitResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewNode) > 0 {
		for _, msg := range m.NewNode {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetapb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DoSplitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoSplitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupNo.Size()))
	n7, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.SplitKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.SplitKey)))
		i += copy(dAtA[i:], m.SplitKey)
	}
	return i, nil
}

func (m *DoSplitResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoSplitResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.Error.Size()))
	n8, err := m.Error.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *ConfChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.NewGroupInfo.Size()))
	n9, err := m.NewGroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ConfChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfChangeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.NewGroupInfo.Size()))
	n10, err := m.NewGroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *QueryLocationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetapb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *QueryLocationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetapb(dAtA, i, uint64(m.GroupInfo.Size()))
	n11, err := m.GroupInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func encodeVarintMetapb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetLatestTermReq) Size() (n int) {
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *GetLatestTermResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *JoinReq) Size() (n int) {
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *JoinResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *NeedSplitReq) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *NeedSplitResp) Size() (n int) {
	var l int
	_ = l
	if len(m.NewNode) > 0 {
		for _, e := range m.NewNode {
			l = e.Size()
			n += 1 + l + sovMetapb(uint64(l))
		}
	}
	return n
}

func (m *DoSplitReq) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	l = len(m.SplitKey)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *DoSplitResp) Size() (n int) {
	var l int
	_ = l
	l = m.Error.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *ConfChangeReq) Size() (n int) {
	var l int
	_ = l
	l = m.NewGroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	if m.Type != 0 {
		n += 1 + sovMetapb(uint64(m.Type))
	}
	return n
}

func (m *ConfChangeResp) Size() (n int) {
	var l int
	_ = l
	l = m.NewGroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func (m *QueryLocationReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMetapb(uint64(l))
	}
	return n
}

func (m *QueryLocationResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupInfo.Size()
	n += 1 + l + sovMetapb(uint64(l))
	return n
}

func sovMetapb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetapb(x uint64) (n int) {
	return sovMetapb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetLatestTermReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestTermReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestTermReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestTermResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestTermResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestTermResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeedSplitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeedSplitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeedSplitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeedSplitResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeedSplitResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeedSplitResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNode = append(m.NewNode, configpb.NodeAddress{})
			if err := m.NewNode[len(m.NewNode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoSplitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoSplitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoSplitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKey = append(m.SplitKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitKey == nil {
				m.SplitKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoSplitResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoSplitResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoSplitResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewGroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ConfChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewGroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetapb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetapb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetapb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetapb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetapb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetapb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetapb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metapb/metapb.proto", fileDescriptorMetapb) }

var fileDescriptorMetapb = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0xda, 0x4e,
	0x10, 0xc6, 0x24, 0xbf, 0x40, 0x26, 0x81, 0x9f, 0xb3, 0x40, 0x4a, 0x5d, 0x89, 0x22, 0x2b, 0x87,
	0x94, 0x03, 0x48, 0x44, 0xad, 0x5a, 0xf5, 0xd0, 0x12, 0x8c, 0x28, 0x6d, 0x70, 0x1a, 0x13, 0x55,
	0xea, 0xa5, 0xc8, 0xc0, 0xe2, 0x5a, 0x6d, 0xbc, 0x5b, 0xaf, 0x53, 0x84, 0xd4, 0x07, 0xe9, 0x23,
	0xe5, 0x98, 0x27, 0xa8, 0x5a, 0xfa, 0x00, 0x7d, 0x85, 0x6a, 0xd7, 0x36, 0x36, 0x7f, 0xaa, 0x1c,
	0x38, 0xed, 0xfa, 0x9b, 0xf1, 0x37, 0x33, 0xdf, 0xcc, 0x2c, 0xe4, 0xae, 0xb0, 0x67, 0xd2, 0x41,
	0xcd, 0x3f, 0xaa, 0xd4, 0x25, 0x1e, 0x41, 0x3b, 0xfe, 0x97, 0x92, 0xb7, 0x88, 0x45, 0x04, 0x54,
	0xe3, 0x37, 0xdf, 0xaa, 0xdc, 0x1b, 0x12, 0x67, 0x6c, 0x5b, 0x74, 0x50, 0x0b, 0x2f, 0x81, 0xa1,
	0x80, 0x5d, 0x97, 0xb8, 0x74, 0x50, 0x0b, 0x4e, 0x1f, 0x56, 0x3b, 0x20, 0xb7, 0xb1, 0x77, 0x66,
	0x7a, 0x98, 0x79, 0x97, 0xd8, 0xbd, 0x32, 0xf0, 0x17, 0xf4, 0x18, 0x52, 0xe6, 0x68, 0xe4, 0x62,
	0xc6, 0x8a, 0x52, 0x59, 0x3a, 0xde, 0xab, 0x17, 0xaa, 0x73, 0x32, 0x9d, 0x8c, 0x70, 0xc3, 0x37,
	0x9e, 0x6e, 0xdf, 0xfc, 0x78, 0x98, 0x30, 0x42, 0x5f, 0x95, 0xc1, 0xc1, 0x12, 0x15, 0xa3, 0xe8,
	0x29, 0x80, 0xe5, 0x92, 0x6b, 0xda, 0xb7, 0x9d, 0x31, 0x09, 0xe8, 0x72, 0x11, 0x5d, 0x9b, 0xdb,
	0x3a, 0xce, 0x98, 0x04, 0x64, 0xbb, 0x56, 0x08, 0xa0, 0x23, 0xf8, 0x4f, 0xa4, 0x5a, 0x4c, 0x8a,
	0x9f, 0xb2, 0xd5, 0x30, 0xf1, 0x16, 0x3f, 0x0d, 0xdf, 0xa8, 0xbe, 0x84, 0xd4, 0x6b, 0x62, 0x3b,
	0x1b, 0xa4, 0xad, 0x41, 0xda, 0x67, 0xd8, 0x24, 0x5b, 0xb5, 0x09, 0xfb, 0x3a, 0xc6, 0xa3, 0x1e,
	0xfd, 0x6c, 0x7b, 0x3c, 0x99, 0x13, 0x48, 0xfb, 0x4c, 0x4e, 0xc8, 0x83, 0x22, 0x9e, 0xa6, 0xb8,
	0xe8, 0x21, 0x4d, 0x4a, 0x78, 0xea, 0x44, 0x6d, 0x43, 0x26, 0x46, 0xc2, 0x28, 0x7a, 0x02, 0x69,
	0x07, 0x4f, 0xfa, 0x0e, 0x19, 0xe1, 0xa2, 0x54, 0xde, 0xba, 0xb3, 0x26, 0x07, 0x4f, 0x38, 0xaa,
	0x7e, 0x00, 0xd0, 0xc8, 0x46, 0xb9, 0xa0, 0x07, 0xb0, 0xcb, 0x38, 0x41, 0xff, 0x13, 0x9e, 0x8a,
	0x16, 0xec, 0x1b, 0x69, 0x01, 0xbc, 0xc1, 0x53, 0xf5, 0x19, 0xec, 0xcd, 0xf9, 0x19, 0x45, 0x95,
	0xb0, 0x55, 0xd2, 0xba, 0x56, 0x05, 0xcc, 0x41, 0xc3, 0xbe, 0x41, 0x86, 0x87, 0x6c, 0x7e, 0x34,
	0x1d, 0x0b, 0xf3, 0xec, 0x5e, 0x40, 0x96, 0xd7, 0x18, 0xd3, 0x3d, 0x79, 0x97, 0xee, 0xfb, 0x0e,
	0x9e, 0xcc, 0x31, 0x54, 0x81, 0x6d, 0x6f, 0x4a, 0x71, 0x71, 0xab, 0x2c, 0x1d, 0x67, 0xeb, 0x87,
	0xd5, 0x60, 0x5b, 0xa2, 0x28, 0x97, 0x53, 0x8a, 0x0d, 0xe1, 0xa3, 0x5e, 0x40, 0x36, 0x1e, 0x9d,
	0xd1, 0x8d, 0xc3, 0xab, 0x47, 0x20, 0x5f, 0x5c, 0x63, 0x77, 0x7a, 0x46, 0x86, 0xa6, 0x67, 0x13,
	0x31, 0x8a, 0x32, 0x6c, 0x71, 0xd9, 0x24, 0x21, 0x1b, 0xbf, 0xaa, 0x5d, 0x38, 0x58, 0xf2, 0xda,
	0x64, 0xdc, 0x2a, 0xdd, 0x78, 0x1d, 0xbc, 0x3e, 0x74, 0x00, 0x99, 0x86, 0xa6, 0xf5, 0x7b, 0xad,
	0xe6, 0xb9, 0xae, 0x35, 0x8c, 0xf7, 0x72, 0x02, 0xe5, 0x41, 0x36, 0x5a, 0xdd, 0xf3, 0x77, 0xad,
	0x18, 0x2a, 0x21, 0x04, 0xd9, 0xe6, 0xab, 0x86, 0xde, 0x6e, 0xf5, 0xdf, 0x1a, 0x9d, 0x2e, 0xc7,
	0x92, 0xf5, 0x3f, 0x49, 0xd8, 0xeb, 0x62, 0xcf, 0xec, 0x61, 0xf7, 0xab, 0x3d, 0xc4, 0x48, 0x83,
	0xcc, 0xc2, 0x2a, 0xa3, 0x62, 0xa8, 0xea, 0xf2, 0x63, 0xa1, 0xdc, 0xff, 0x87, 0x85, 0x51, 0xf4,
	0x08, 0xb6, 0xf9, 0x66, 0xa1, 0xff, 0x43, 0x97, 0x60, 0x53, 0x15, 0x79, 0x11, 0x10, 0x4a, 0xec,
	0xce, 0x27, 0x1f, 0xe5, 0x43, 0x73, 0x7c, 0xa3, 0x94, 0xc2, 0x1a, 0x94, 0x51, 0x54, 0x87, 0x54,
	0x30, 0x8a, 0x08, 0x85, 0x1e, 0xd1, 0xec, 0x2b, 0xb9, 0x15, 0x8c, 0x51, 0xf4, 0x1c, 0x20, 0x52,
	0x0f, 0x15, 0x56, 0x27, 0x86, 0xff, 0x79, 0xb8, 0x0e, 0x66, 0x94, 0x6b, 0xb3, 0xd0, 0xc9, 0x48,
	0x9b, 0xe5, 0x31, 0x88, 0xb4, 0x59, 0x69, 0xfd, 0x69, 0xfe, 0xf6, 0x57, 0x29, 0x71, 0x33, 0x2b,
	0x49, 0xb7, 0xb3, 0x92, 0xf4, 0x73, 0x56, 0x92, 0xbe, 0xff, 0x2e, 0x25, 0x06, 0x3b, 0xe2, 0x51,
	0x3e, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xb4, 0xc6, 0xb9, 0xf9, 0x05, 0x00, 0x00,
}
