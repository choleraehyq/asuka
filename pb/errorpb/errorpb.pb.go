// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errorpb/errorpb.proto

/*
	Package errorpb is a generated protocol buffer package.

	It is generated from these files:
		errorpb/errorpb.proto

	It has these top-level messages:
		NotLeader
		NodeNotFound
		KeyNotFound
		GroupNotFound
		StaleEpoch
		SnTooHigh
		Other
		Error
*/
package errorpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import configpb "github.com/choleraehyq/asuka/pb/configpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NotLeader struct {
	Leader string `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (m *NotLeader) Reset()                    { *m = NotLeader{} }
func (m *NotLeader) String() string            { return proto.CompactTextString(m) }
func (*NotLeader) ProtoMessage()               {}
func (*NotLeader) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{0} }

func (m *NotLeader) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

type NodeNotFound struct {
	Node string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (m *NodeNotFound) Reset()                    { *m = NodeNotFound{} }
func (m *NodeNotFound) String() string            { return proto.CompactTextString(m) }
func (*NodeNotFound) ProtoMessage()               {}
func (*NodeNotFound) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{1} }

func (m *NodeNotFound) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type KeyNotFound struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *KeyNotFound) Reset()                    { *m = KeyNotFound{} }
func (m *KeyNotFound) String() string            { return proto.CompactTextString(m) }
func (*KeyNotFound) ProtoMessage()               {}
func (*KeyNotFound) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{2} }

func (m *KeyNotFound) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GroupNotFound struct {
	Groups string `protobuf:"bytes,1,opt,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GroupNotFound) Reset()                    { *m = GroupNotFound{} }
func (m *GroupNotFound) String() string            { return proto.CompactTextString(m) }
func (*GroupNotFound) ProtoMessage()               {}
func (*GroupNotFound) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{3} }

func (m *GroupNotFound) GetGroups() string {
	if m != nil {
		return m.Groups
	}
	return ""
}

type StaleEpoch struct {
	CurrentTerm configpb.ConfigNo `protobuf:"bytes,1,opt,name=current_term,json=currentTerm" json:"current_term"`
}

func (m *StaleEpoch) Reset()                    { *m = StaleEpoch{} }
func (m *StaleEpoch) String() string            { return proto.CompactTextString(m) }
func (*StaleEpoch) ProtoMessage()               {}
func (*StaleEpoch) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{4} }

func (m *StaleEpoch) GetCurrentTerm() configpb.ConfigNo {
	if m != nil {
		return m.CurrentTerm
	}
	return configpb.ConfigNo{}
}

type SnTooHigh struct {
	CurrentSn uint64 `protobuf:"varint,1,opt,name=current_sn,json=currentSn,proto3" json:"current_sn,omitempty"`
}

func (m *SnTooHigh) Reset()                    { *m = SnTooHigh{} }
func (m *SnTooHigh) String() string            { return proto.CompactTextString(m) }
func (*SnTooHigh) ProtoMessage()               {}
func (*SnTooHigh) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{5} }

func (m *SnTooHigh) GetCurrentSn() uint64 {
	if m != nil {
		return m.CurrentSn
	}
	return 0
}

type Other struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Other) Reset()                    { *m = Other{} }
func (m *Other) String() string            { return proto.CompactTextString(m) }
func (*Other) ProtoMessage()               {}
func (*Other) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{6} }

func (m *Other) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Error struct {
	// Types that are valid to be assigned to ErrorType:
	//	*Error_NotLeader
	//	*Error_Node
	//	*Error_KeyNotFound
	//	*Error_StaleEpoch
	//	*Error_GroupNotFound
	//	*Error_SnTooHigh
	//	*Error_Other
	ErrorType isError_ErrorType `protobuf_oneof:"error_type"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{7} }

type isError_ErrorType interface {
	isError_ErrorType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Error_NotLeader struct {
	NotLeader *NotLeader `protobuf:"bytes,1,opt,name=not_leader,json=notLeader,oneof"`
}
type Error_Node struct {
	Node *NodeNotFound `protobuf:"bytes,2,opt,name=node,oneof"`
}
type Error_KeyNotFound struct {
	KeyNotFound *KeyNotFound `protobuf:"bytes,3,opt,name=key_not_found,json=keyNotFound,oneof"`
}
type Error_StaleEpoch struct {
	StaleEpoch *StaleEpoch `protobuf:"bytes,4,opt,name=stale_epoch,json=staleEpoch,oneof"`
}
type Error_GroupNotFound struct {
	GroupNotFound *GroupNotFound `protobuf:"bytes,5,opt,name=group_not_found,json=groupNotFound,oneof"`
}
type Error_SnTooHigh struct {
	SnTooHigh *SnTooHigh `protobuf:"bytes,6,opt,name=sn_too_high,json=snTooHigh,oneof"`
}
type Error_Other struct {
	Other *Other `protobuf:"bytes,100,opt,name=other,oneof"`
}

func (*Error_NotLeader) isError_ErrorType()     {}
func (*Error_Node) isError_ErrorType()          {}
func (*Error_KeyNotFound) isError_ErrorType()   {}
func (*Error_StaleEpoch) isError_ErrorType()    {}
func (*Error_GroupNotFound) isError_ErrorType() {}
func (*Error_SnTooHigh) isError_ErrorType()     {}
func (*Error_Other) isError_ErrorType()         {}

func (m *Error) GetErrorType() isError_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *Error) GetNotLeader() *NotLeader {
	if x, ok := m.GetErrorType().(*Error_NotLeader); ok {
		return x.NotLeader
	}
	return nil
}

func (m *Error) GetNode() *NodeNotFound {
	if x, ok := m.GetErrorType().(*Error_Node); ok {
		return x.Node
	}
	return nil
}

func (m *Error) GetKeyNotFound() *KeyNotFound {
	if x, ok := m.GetErrorType().(*Error_KeyNotFound); ok {
		return x.KeyNotFound
	}
	return nil
}

func (m *Error) GetStaleEpoch() *StaleEpoch {
	if x, ok := m.GetErrorType().(*Error_StaleEpoch); ok {
		return x.StaleEpoch
	}
	return nil
}

func (m *Error) GetGroupNotFound() *GroupNotFound {
	if x, ok := m.GetErrorType().(*Error_GroupNotFound); ok {
		return x.GroupNotFound
	}
	return nil
}

func (m *Error) GetSnTooHigh() *SnTooHigh {
	if x, ok := m.GetErrorType().(*Error_SnTooHigh); ok {
		return x.SnTooHigh
	}
	return nil
}

func (m *Error) GetOther() *Other {
	if x, ok := m.GetErrorType().(*Error_Other); ok {
		return x.Other
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Error) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Error_OneofMarshaler, _Error_OneofUnmarshaler, _Error_OneofSizer, []interface{}{
		(*Error_NotLeader)(nil),
		(*Error_Node)(nil),
		(*Error_KeyNotFound)(nil),
		(*Error_StaleEpoch)(nil),
		(*Error_GroupNotFound)(nil),
		(*Error_SnTooHigh)(nil),
		(*Error_Other)(nil),
	}
}

func _Error_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Error)
	// error_type
	switch x := m.ErrorType.(type) {
	case *Error_NotLeader:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotLeader); err != nil {
			return err
		}
	case *Error_Node:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *Error_KeyNotFound:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeyNotFound); err != nil {
			return err
		}
	case *Error_StaleEpoch:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StaleEpoch); err != nil {
			return err
		}
	case *Error_GroupNotFound:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroupNotFound); err != nil {
			return err
		}
	case *Error_SnTooHigh:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SnTooHigh); err != nil {
			return err
		}
	case *Error_Other:
		_ = b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Other); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Error.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _Error_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Error)
	switch tag {
	case 1: // error_type.not_leader
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotLeader)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_NotLeader{msg}
		return true, err
	case 2: // error_type.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeNotFound)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_Node{msg}
		return true, err
	case 3: // error_type.key_not_found
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KeyNotFound)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_KeyNotFound{msg}
		return true, err
	case 4: // error_type.stale_epoch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StaleEpoch)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_StaleEpoch{msg}
		return true, err
	case 5: // error_type.group_not_found
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GroupNotFound)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_GroupNotFound{msg}
		return true, err
	case 6: // error_type.sn_too_high
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnTooHigh)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_SnTooHigh{msg}
		return true, err
	case 100: // error_type.other
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Other)
		err := b.DecodeMessage(msg)
		m.ErrorType = &Error_Other{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Error_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Error)
	// error_type
	switch x := m.ErrorType.(type) {
	case *Error_NotLeader:
		s := proto.Size(x.NotLeader)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Error_Node:
		s := proto.Size(x.Node)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Error_KeyNotFound:
		s := proto.Size(x.KeyNotFound)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Error_StaleEpoch:
		s := proto.Size(x.StaleEpoch)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Error_GroupNotFound:
		s := proto.Size(x.GroupNotFound)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Error_SnTooHigh:
		s := proto.Size(x.SnTooHigh)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Error_Other:
		s := proto.Size(x.Other)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NotLeader)(nil), "errorpb.NotLeader")
	proto.RegisterType((*NodeNotFound)(nil), "errorpb.NodeNotFound")
	proto.RegisterType((*KeyNotFound)(nil), "errorpb.KeyNotFound")
	proto.RegisterType((*GroupNotFound)(nil), "errorpb.GroupNotFound")
	proto.RegisterType((*StaleEpoch)(nil), "errorpb.StaleEpoch")
	proto.RegisterType((*SnTooHigh)(nil), "errorpb.SnTooHigh")
	proto.RegisterType((*Other)(nil), "errorpb.Other")
	proto.RegisterType((*Error)(nil), "errorpb.Error")
}
func (m *NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Leader) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Leader)))
		i += copy(dAtA[i:], m.Leader)
	}
	return i, nil
}

func (m *NodeNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Node) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	return i, nil
}

func (m *KeyNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GroupNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Groups)))
		i += copy(dAtA[i:], m.Groups)
	}
	return i, nil
}

func (m *StaleEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleEpoch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintErrorpb(dAtA, i, uint64(m.CurrentTerm.Size()))
	n1, err := m.CurrentTerm.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *SnTooHigh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnTooHigh) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentSn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.CurrentSn))
	}
	return i, nil
}

func (m *Other) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Other) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorType != nil {
		nn2, err := m.ErrorType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Error_NotLeader) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NotLeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.NotLeader.Size()))
		n3, err := m.NotLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Error_Node) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Node != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Node.Size()))
		n4, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Error_KeyNotFound) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.KeyNotFound != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.KeyNotFound.Size()))
		n5, err := m.KeyNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Error_StaleEpoch) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StaleEpoch != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleEpoch.Size()))
		n6, err := m.StaleEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Error_GroupNotFound) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GroupNotFound != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.GroupNotFound.Size()))
		n7, err := m.GroupNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Error_SnTooHigh) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SnTooHigh != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.SnTooHigh.Size()))
		n8, err := m.SnTooHigh.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Error_Other) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Other != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Other.Size()))
		n9, err := m.Other.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func encodeVarintErrorpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NotLeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *NodeNotFound) Size() (n int) {
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *KeyNotFound) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *GroupNotFound) Size() (n int) {
	var l int
	_ = l
	l = len(m.Groups)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *StaleEpoch) Size() (n int) {
	var l int
	_ = l
	l = m.CurrentTerm.Size()
	n += 1 + l + sovErrorpb(uint64(l))
	return n
}

func (m *SnTooHigh) Size() (n int) {
	var l int
	_ = l
	if m.CurrentSn != 0 {
		n += 1 + sovErrorpb(uint64(m.CurrentSn))
	}
	return n
}

func (m *Other) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.ErrorType != nil {
		n += m.ErrorType.Size()
	}
	return n
}

func (m *Error_NotLeader) Size() (n int) {
	var l int
	_ = l
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}
func (m *Error_Node) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}
func (m *Error_KeyNotFound) Size() (n int) {
	var l int
	_ = l
	if m.KeyNotFound != nil {
		l = m.KeyNotFound.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}
func (m *Error_StaleEpoch) Size() (n int) {
	var l int
	_ = l
	if m.StaleEpoch != nil {
		l = m.StaleEpoch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}
func (m *Error_GroupNotFound) Size() (n int) {
	var l int
	_ = l
	if m.GroupNotFound != nil {
		l = m.GroupNotFound.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}
func (m *Error_SnTooHigh) Size() (n int) {
	var l int
	_ = l
	if m.SnTooHigh != nil {
		l = m.SnTooHigh.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	return n
}
func (m *Error_Other) Size() (n int) {
	var l int
	_ = l
	if m.Other != nil {
		l = m.Other.Size()
		n += 2 + l + sovErrorpb(uint64(l))
	}
	return n
}

func sovErrorpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrorpb(x uint64) (n int) {
	return sovErrorpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTerm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentTerm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnTooHigh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnTooHigh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnTooHigh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSn", wireType)
			}
			m.CurrentSn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Other) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Other: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Other: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotLeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_NotLeader{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeNotFound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_Node{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyNotFound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_KeyNotFound{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaleEpoch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_StaleEpoch{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupNotFound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_GroupNotFound{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnTooHigh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SnTooHigh{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_SnTooHigh{v}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Other{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &Error_Other{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrorpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErrorpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrorpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrorpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrorpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrorpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("errorpb/errorpb.proto", fileDescriptorErrorpb) }

var fileDescriptorErrorpb = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x53, 0xfb, 0x67, 0xe9, 0x49, 0xab, 0x32, 0xee, 0x96, 0xb0, 0x60, 0x57, 0x23, 0xa8,
	0x28, 0x36, 0xe0, 0x8a, 0x82, 0xde, 0x48, 0x65, 0x35, 0xa2, 0x54, 0x48, 0xf7, 0x3e, 0xe4, 0xcf,
	0x34, 0x29, 0x6d, 0xe7, 0xc4, 0xc9, 0xe4, 0x22, 0xcf, 0xe0, 0x0b, 0xf8, 0x48, 0x7b, 0xb9, 0x4f,
	0x20, 0x5a, 0x5f, 0x44, 0x66, 0x92, 0x4c, 0xb3, 0x5e, 0xf5, 0x9c, 0x39, 0xdf, 0x37, 0xa7, 0xf3,
	0xfb, 0x02, 0x27, 0x94, 0x73, 0xe4, 0x59, 0xe8, 0xd4, 0xbf, 0xb3, 0x8c, 0xa3, 0x40, 0x72, 0x54,
	0xb7, 0xa7, 0x2f, 0x92, 0xb5, 0x48, 0x8b, 0x70, 0x16, 0xe1, 0xce, 0x49, 0x30, 0x41, 0x47, 0xcd,
	0xc3, 0x62, 0xa5, 0x3a, 0xd5, 0xa8, 0xaa, 0xf2, 0x9d, 0xbe, 0x69, 0xc9, 0xa3, 0x14, 0xb7, 0x94,
	0x07, 0x34, 0x2d, 0xbf, 0x3b, 0x41, 0x5e, 0x6c, 0x02, 0x27, 0x0b, 0x9d, 0x08, 0xd9, 0x6a, 0x9d,
	0xb4, 0x8a, 0xca, 0x68, 0x3f, 0x82, 0xe1, 0x02, 0xc5, 0x57, 0x1a, 0xc4, 0x94, 0x93, 0x09, 0x0c,
	0xb6, 0xaa, 0xb2, 0x3a, 0x0f, 0x3a, 0x4f, 0x87, 0x5e, 0xdd, 0xd9, 0x36, 0x8c, 0x16, 0x18, 0xd3,
	0x05, 0x8a, 0x8f, 0x58, 0xb0, 0x98, 0x10, 0xe8, 0x31, 0x8c, 0x69, 0xad, 0x52, 0xb5, 0x7d, 0x06,
	0xe6, 0x17, 0x5a, 0x6a, 0xc9, 0x5d, 0xe8, 0x6e, 0x68, 0xa9, 0x14, 0x23, 0x4f, 0x96, 0xf6, 0x13,
	0x18, 0x7f, 0xe2, 0x58, 0x64, 0x5a, 0x32, 0x81, 0x41, 0x22, 0x0f, 0xf2, 0x66, 0x5b, 0xd5, 0xd9,
	0x9f, 0x01, 0x96, 0x22, 0xd8, 0xd2, 0x8b, 0x0c, 0xa3, 0x94, 0xbc, 0x83, 0x51, 0x54, 0x70, 0x4e,
	0x99, 0xf0, 0x05, 0xe5, 0x3b, 0xa5, 0x35, 0x5f, 0x92, 0x99, 0x7e, 0xc7, 0x07, 0x55, 0x2c, 0x70,
	0xde, 0xbb, 0xfa, 0x75, 0x66, 0x78, 0x66, 0xad, 0xbe, 0xa4, 0x7c, 0x67, 0x3f, 0x83, 0xe1, 0x92,
	0x5d, 0x22, 0xba, 0xeb, 0x24, 0x25, 0xf7, 0x01, 0x9a, 0x9b, 0x72, 0xa6, 0xee, 0xe9, 0x79, 0xc3,
	0xfa, 0x64, 0xc9, 0xec, 0x87, 0xd0, 0xff, 0x26, 0x52, 0xca, 0x89, 0x05, 0x47, 0x3b, 0x9a, 0xe7,
	0x41, 0xd2, 0x3c, 0xb0, 0x69, 0xed, 0x1f, 0x5d, 0xe8, 0x5f, 0xc8, 0x80, 0xc8, 0x39, 0x00, 0x43,
	0xe1, 0xb7, 0x68, 0xc9, 0xff, 0xd4, 0x64, 0xa9, 0x89, 0xba, 0x86, 0x37, 0x64, 0x1a, 0xef, 0xf3,
	0x1a, 0xdb, 0x2d, 0x25, 0x3f, 0x69, 0xc9, 0x0f, 0x6c, 0x5d, 0xa3, 0xe2, 0x49, 0xde, 0xc2, 0x78,
	0x43, 0x4b, 0x5f, 0x6e, 0x59, 0xc9, 0x81, 0xd5, 0x55, 0xae, 0x63, 0xed, 0x6a, 0xd1, 0x76, 0x0d,
	0xcf, 0xdc, 0xb4, 0xe0, 0xbf, 0x06, 0x33, 0x97, 0x04, 0x7d, 0x2a, 0x11, 0x5a, 0x3d, 0xe5, 0xbc,
	0xa7, 0x9d, 0x07, 0xba, 0xae, 0xe1, 0x41, 0x7e, 0x60, 0xfd, 0x1e, 0xee, 0xa8, 0x0c, 0x5a, 0x5b,
	0xfb, 0xca, 0x3b, 0xd1, 0xde, 0x1b, 0x11, 0xba, 0x86, 0x37, 0x4e, 0x6e, 0x64, 0xfa, 0x0a, 0xcc,
	0x9c, 0xf9, 0x02, 0xd1, 0x4f, 0xd7, 0x49, 0x6a, 0x0d, 0xfe, 0x03, 0xa3, 0xc3, 0x90, 0x60, 0x72,
	0x9d, 0xcc, 0x63, 0xe8, 0xa3, 0x44, 0x6f, 0xc5, 0x4a, 0x7f, 0x5b, 0xeb, 0x55, 0x20, 0xae, 0xe1,
	0x55, 0xe3, 0xf9, 0x08, 0x40, 0x4d, 0x7c, 0x51, 0x66, 0x74, 0x7e, 0x7c, 0xfd, 0x67, 0x6a, 0x5c,
	0xed, 0xa7, 0x9d, 0xeb, 0xfd, 0xb4, 0xf3, 0x7b, 0x3f, 0xed, 0xfc, 0xfc, 0x3b, 0x35, 0xc2, 0x81,
	0xfa, 0xae, 0xcf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x40, 0x5a, 0x86, 0x2f, 0x61, 0x03, 0x00,
	0x00,
}
