// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: datapb/datapb.proto

/*
	Package datapb is a generated protocol buffer package.

	It is generated from these files:
		datapb/datapb.proto

	It has these top-level messages:
		GetReq
		GetResp
		SetReq
		SetResp
		Log
		AppendLogReq
		AppendLogResp
		HeartbeatReq
		HeartbeatResp
		GetLatestSnapshotReq
		GetLatestSnapshotResp
		GetLogReq
		GetLogResp
		GroupChangeReq
		GroupChangeResp
		MetaServerChangeReq
		MetaServerChangeResp
*/
package datapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import configpb "configpb"
import errorpb "errorpb"
import storagepb "storagepb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// the reason causes this group change
type GroupChangeType int32

const (
	ADD_NODE    GroupChangeType = 0
	REMOVE_NODE GroupChangeType = 1
	NEED_SPLIT  GroupChangeType = 2
	DO_SPLIT    GroupChangeType = 3
)

var GroupChangeType_name = map[int32]string{
	0: "ADD_NODE",
	1: "REMOVE_NODE",
	2: "NEED_SPLIT",
	3: "DO_SPLIT",
}
var GroupChangeType_value = map[string]int32{
	"ADD_NODE":    0,
	"REMOVE_NODE": 1,
	"NEED_SPLIT":  2,
	"DO_SPLIT":    3,
}

func (x GroupChangeType) String() string {
	return proto.EnumName(GroupChangeType_name, int32(x))
}
func (GroupChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{0} }

type GetReq struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetReq) Reset()                    { *m = GetReq{} }
func (m *GetReq) String() string            { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()               {}
func (*GetReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{0} }

func (m *GetReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResp struct {
	Value []byte         `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Error *errorpb.Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetResp) Reset()                    { *m = GetResp{} }
func (m *GetResp) String() string            { return proto.CompactTextString(m) }
func (*GetResp) ProtoMessage()               {}
func (*GetResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{1} }

func (m *GetResp) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GetResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SetReq struct {
	Pair storagepb.KVPair `protobuf:"bytes,1,opt,name=pair" json:"pair"`
}

func (m *SetReq) Reset()                    { *m = SetReq{} }
func (m *SetReq) String() string            { return proto.CompactTextString(m) }
func (*SetReq) ProtoMessage()               {}
func (*SetReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{2} }

func (m *SetReq) GetPair() storagepb.KVPair {
	if m != nil {
		return m.Pair
	}
	return storagepb.KVPair{}
}

type SetResp struct {
	Error *errorpb.Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *SetResp) Reset()                    { *m = SetResp{} }
func (m *SetResp) String() string            { return proto.CompactTextString(m) }
func (*SetResp) ProtoMessage()               {}
func (*SetResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{3} }

func (m *SetResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Log struct {
	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	OldValue []byte `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue []byte `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{4} }

func (m *Log) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Log) GetOldValue() []byte {
	if m != nil {
		return m.OldValue
	}
	return nil
}

func (m *Log) GetNewValue() []byte {
	if m != nil {
		return m.NewValue
	}
	return nil
}

type AppendLogReq struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Sn      uint64            `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Log     *Log              `protobuf:"bytes,3,opt,name=log" json:"log,omitempty"`
}

func (m *AppendLogReq) Reset()                    { *m = AppendLogReq{} }
func (m *AppendLogReq) String() string            { return proto.CompactTextString(m) }
func (*AppendLogReq) ProtoMessage()               {}
func (*AppendLogReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{5} }

func (m *AppendLogReq) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *AppendLogReq) GetSn() uint64 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *AppendLogReq) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

type AppendLogResp struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Sn      uint64            `protobuf:"varint,3,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (m *AppendLogResp) Reset()                    { *m = AppendLogResp{} }
func (m *AppendLogResp) String() string            { return proto.CompactTextString(m) }
func (*AppendLogResp) ProtoMessage()               {}
func (*AppendLogResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{6} }

func (m *AppendLogResp) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *AppendLogResp) GetSn() uint64 {
	if m != nil {
		return m.Sn
	}
	return 0
}

type HeartbeatReq struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
}

func (m *HeartbeatReq) Reset()                    { *m = HeartbeatReq{} }
func (m *HeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatReq) ProtoMessage()               {}
func (*HeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{7} }

func (m *HeartbeatReq) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

type HeartbeatResp struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Error   *errorpb.Error    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *HeartbeatResp) Reset()                    { *m = HeartbeatResp{} }
func (m *HeartbeatResp) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResp) ProtoMessage()               {}
func (*HeartbeatResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{8} }

func (m *HeartbeatResp) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *HeartbeatResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetLatestSnapshotReq struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Range   configpb.KeyRange `protobuf:"bytes,2,opt,name=range" json:"range"`
}

func (m *GetLatestSnapshotReq) Reset()                    { *m = GetLatestSnapshotReq{} }
func (m *GetLatestSnapshotReq) String() string            { return proto.CompactTextString(m) }
func (*GetLatestSnapshotReq) ProtoMessage()               {}
func (*GetLatestSnapshotReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{9} }

func (m *GetLatestSnapshotReq) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *GetLatestSnapshotReq) GetRange() configpb.KeyRange {
	if m != nil {
		return m.Range
	}
	return configpb.KeyRange{}
}

type GetLatestSnapshotResp struct {
	GroupNo  configpb.ConfigNo   `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Snapshot *storagepb.Snapshot `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
	Error    *errorpb.Error      `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetLatestSnapshotResp) Reset()                    { *m = GetLatestSnapshotResp{} }
func (m *GetLatestSnapshotResp) String() string            { return proto.CompactTextString(m) }
func (*GetLatestSnapshotResp) ProtoMessage()               {}
func (*GetLatestSnapshotResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{10} }

func (m *GetLatestSnapshotResp) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *GetLatestSnapshotResp) GetSnapshot() *storagepb.Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *GetLatestSnapshotResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetLogReq struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Sn      uint64            `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (m *GetLogReq) Reset()                    { *m = GetLogReq{} }
func (m *GetLogReq) String() string            { return proto.CompactTextString(m) }
func (*GetLogReq) ProtoMessage()               {}
func (*GetLogReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{11} }

func (m *GetLogReq) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *GetLogReq) GetSn() uint64 {
	if m != nil {
		return m.Sn
	}
	return 0
}

type GetLogResp struct {
	GroupNo configpb.ConfigNo `protobuf:"bytes,1,opt,name=group_no,json=groupNo" json:"group_no"`
	Sn      uint64            `protobuf:"varint,2,opt,name=sn,proto3" json:"sn,omitempty"`
	Log     *Log              `protobuf:"bytes,3,opt,name=log" json:"log,omitempty"`
	Error   *errorpb.Error    `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *GetLogResp) Reset()                    { *m = GetLogResp{} }
func (m *GetLogResp) String() string            { return proto.CompactTextString(m) }
func (*GetLogResp) ProtoMessage()               {}
func (*GetLogResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{12} }

func (m *GetLogResp) GetGroupNo() configpb.ConfigNo {
	if m != nil {
		return m.GroupNo
	}
	return configpb.ConfigNo{}
}

func (m *GetLogResp) GetSn() uint64 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *GetLogResp) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *GetLogResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GroupChangeReq struct {
	NewGroupInfo *configpb.GroupInfo `protobuf:"bytes,1,opt,name=new_group_info,json=newGroupInfo" json:"new_group_info,omitempty"`
	Reason       GroupChangeType     `protobuf:"varint,2,opt,name=reason,proto3,enum=datapb.GroupChangeType" json:"reason,omitempty"`
}

func (m *GroupChangeReq) Reset()                    { *m = GroupChangeReq{} }
func (m *GroupChangeReq) String() string            { return proto.CompactTextString(m) }
func (*GroupChangeReq) ProtoMessage()               {}
func (*GroupChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{13} }

func (m *GroupChangeReq) GetNewGroupInfo() *configpb.GroupInfo {
	if m != nil {
		return m.NewGroupInfo
	}
	return nil
}

func (m *GroupChangeReq) GetReason() GroupChangeType {
	if m != nil {
		return m.Reason
	}
	return ADD_NODE
}

type GroupChangeResp struct {
	NewGroupInfo *configpb.GroupInfo `protobuf:"bytes,1,opt,name=new_group_info,json=newGroupInfo" json:"new_group_info,omitempty"`
	Error        *errorpb.Error      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GroupChangeResp) Reset()                    { *m = GroupChangeResp{} }
func (m *GroupChangeResp) String() string            { return proto.CompactTextString(m) }
func (*GroupChangeResp) ProtoMessage()               {}
func (*GroupChangeResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{14} }

func (m *GroupChangeResp) GetNewGroupInfo() *configpb.GroupInfo {
	if m != nil {
		return m.NewGroupInfo
	}
	return nil
}

func (m *GroupChangeResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type MetaServerChangeReq struct {
	NewMetaList []*configpb.NodeAddress `protobuf:"bytes,1,rep,name=new_meta_list,json=newMetaList" json:"new_meta_list,omitempty"`
}

func (m *MetaServerChangeReq) Reset()                    { *m = MetaServerChangeReq{} }
func (m *MetaServerChangeReq) String() string            { return proto.CompactTextString(m) }
func (*MetaServerChangeReq) ProtoMessage()               {}
func (*MetaServerChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{15} }

func (m *MetaServerChangeReq) GetNewMetaList() []*configpb.NodeAddress {
	if m != nil {
		return m.NewMetaList
	}
	return nil
}

type MetaServerChangeResp struct {
	NewMetaList []*configpb.NodeAddress `protobuf:"bytes,1,rep,name=new_meta_list,json=newMetaList" json:"new_meta_list,omitempty"`
	Error       *errorpb.Error          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MetaServerChangeResp) Reset()                    { *m = MetaServerChangeResp{} }
func (m *MetaServerChangeResp) String() string            { return proto.CompactTextString(m) }
func (*MetaServerChangeResp) ProtoMessage()               {}
func (*MetaServerChangeResp) Descriptor() ([]byte, []int) { return fileDescriptorDatapb, []int{16} }

func (m *MetaServerChangeResp) GetNewMetaList() []*configpb.NodeAddress {
	if m != nil {
		return m.NewMetaList
	}
	return nil
}

func (m *MetaServerChangeResp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*GetReq)(nil), "datapb.GetReq")
	proto.RegisterType((*GetResp)(nil), "datapb.GetResp")
	proto.RegisterType((*SetReq)(nil), "datapb.SetReq")
	proto.RegisterType((*SetResp)(nil), "datapb.SetResp")
	proto.RegisterType((*Log)(nil), "datapb.Log")
	proto.RegisterType((*AppendLogReq)(nil), "datapb.AppendLogReq")
	proto.RegisterType((*AppendLogResp)(nil), "datapb.AppendLogResp")
	proto.RegisterType((*HeartbeatReq)(nil), "datapb.HeartbeatReq")
	proto.RegisterType((*HeartbeatResp)(nil), "datapb.HeartbeatResp")
	proto.RegisterType((*GetLatestSnapshotReq)(nil), "datapb.GetLatestSnapshotReq")
	proto.RegisterType((*GetLatestSnapshotResp)(nil), "datapb.GetLatestSnapshotResp")
	proto.RegisterType((*GetLogReq)(nil), "datapb.GetLogReq")
	proto.RegisterType((*GetLogResp)(nil), "datapb.GetLogResp")
	proto.RegisterType((*GroupChangeReq)(nil), "datapb.GroupChangeReq")
	proto.RegisterType((*GroupChangeResp)(nil), "datapb.GroupChangeResp")
	proto.RegisterType((*MetaServerChangeReq)(nil), "datapb.MetaServerChangeReq")
	proto.RegisterType((*MetaServerChangeResp)(nil), "datapb.MetaServerChangeResp")
	proto.RegisterEnum("datapb.GroupChangeType", GroupChangeType_name, GroupChangeType_value)
}
func (m *GetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.Pair.Size()))
	n2, err := m.Pair.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *SetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.OldValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(len(m.OldValue)))
		i += copy(dAtA[i:], m.OldValue)
	}
	if len(m.NewValue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(len(m.NewValue)))
		i += copy(dAtA[i:], m.NewValue)
	}
	return i, nil
}

func (m *AppendLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendLogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n4, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.Sn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Sn))
	}
	if m.Log != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Log.Size()))
		n5, err := m.Log.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AppendLogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendLogResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n6, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Sn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Sn))
	}
	return i, nil
}

func (m *HeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n7, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *HeartbeatResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n8, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n9, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *GetLatestSnapshotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestSnapshotReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n10, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.Range.Size()))
	n11, err := m.Range.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *GetLatestSnapshotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestSnapshotResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n12, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.Snapshot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Snapshot.Size()))
		n13, err := m.Snapshot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n14, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *GetLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n15, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.Sn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Sn))
	}
	return i, nil
}

func (m *GetLogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatapb(dAtA, i, uint64(m.GroupNo.Size()))
	n16, err := m.GroupNo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.Sn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Sn))
	}
	if m.Log != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Log.Size()))
		n17, err := m.Log.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Error != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n18, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *GroupChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewGroupInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.NewGroupInfo.Size()))
		n19, err := m.NewGroupInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Reason != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Reason))
	}
	return i, nil
}

func (m *GroupChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupChangeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewGroupInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.NewGroupInfo.Size()))
		n20, err := m.NewGroupInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n21, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *MetaServerChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaServerChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewMetaList) > 0 {
		for _, msg := range m.NewMetaList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDatapb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetaServerChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaServerChangeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewMetaList) > 0 {
		for _, msg := range m.NewMetaList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDatapb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatapb(dAtA, i, uint64(m.Error.Size()))
		n22, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func encodeVarintDatapb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *GetResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDatapb(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *SetReq) Size() (n int) {
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovDatapb(uint64(l))
	return n
}

func (m *SetResp) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *Log) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDatapb(uint64(l))
	}
	l = len(m.OldValue)
	if l > 0 {
		n += 1 + l + sovDatapb(uint64(l))
	}
	l = len(m.NewValue)
	if l > 0 {
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *AppendLogReq) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	if m.Sn != 0 {
		n += 1 + sovDatapb(uint64(m.Sn))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *AppendLogResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	if m.Sn != 0 {
		n += 1 + sovDatapb(uint64(m.Sn))
	}
	return n
}

func (m *HeartbeatReq) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	return n
}

func (m *HeartbeatResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *GetLatestSnapshotReq) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	l = m.Range.Size()
	n += 1 + l + sovDatapb(uint64(l))
	return n
}

func (m *GetLatestSnapshotResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *GetLogReq) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	if m.Sn != 0 {
		n += 1 + sovDatapb(uint64(m.Sn))
	}
	return n
}

func (m *GetLogResp) Size() (n int) {
	var l int
	_ = l
	l = m.GroupNo.Size()
	n += 1 + l + sovDatapb(uint64(l))
	if m.Sn != 0 {
		n += 1 + sovDatapb(uint64(m.Sn))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *GroupChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.NewGroupInfo != nil {
		l = m.NewGroupInfo.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovDatapb(uint64(m.Reason))
	}
	return n
}

func (m *GroupChangeResp) Size() (n int) {
	var l int
	_ = l
	if m.NewGroupInfo != nil {
		l = m.NewGroupInfo.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func (m *MetaServerChangeReq) Size() (n int) {
	var l int
	_ = l
	if len(m.NewMetaList) > 0 {
		for _, e := range m.NewMetaList {
			l = e.Size()
			n += 1 + l + sovDatapb(uint64(l))
		}
	}
	return n
}

func (m *MetaServerChangeResp) Size() (n int) {
	var l int
	_ = l
	if len(m.NewMetaList) > 0 {
		for _, e := range m.NewMetaList {
			l = e.Size()
			n += 1 + l + sovDatapb(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDatapb(uint64(l))
	}
	return n
}

func sovDatapb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDatapb(x uint64) (n int) {
	return sovDatapb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldValue = append(m.OldValue[:0], dAtA[iNdEx:postIndex]...)
			if m.OldValue == nil {
				m.OldValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = append(m.NewValue[:0], dAtA[iNdEx:postIndex]...)
			if m.NewValue == nil {
				m.NewValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &Log{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendLogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendLogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendLogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestSnapshotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestSnapshotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestSnapshotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestSnapshotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestSnapshotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestSnapshotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &storagepb.Snapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupNo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &Log{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewGroupInfo == nil {
				m.NewGroupInfo = &configpb.GroupInfo{}
			}
			if err := m.NewGroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (GroupChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewGroupInfo == nil {
				m.NewGroupInfo = &configpb.GroupInfo{}
			}
			if err := m.NewGroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaServerChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaServerChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaServerChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMetaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMetaList = append(m.NewMetaList, &configpb.NodeAddress{})
			if err := m.NewMetaList[len(m.NewMetaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaServerChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaServerChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaServerChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMetaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMetaList = append(m.NewMetaList, &configpb.NodeAddress{})
			if err := m.NewMetaList[len(m.NewMetaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatapb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatapb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatapb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatapb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatapb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatapb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDatapb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDatapb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDatapb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDatapb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatapb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("datapb/datapb.proto", fileDescriptorDatapb) }

var fileDescriptorDatapb = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xd1, 0x4e, 0x32, 0x47,
	0x14, 0x66, 0x59, 0x44, 0x38, 0x8b, 0x88, 0x03, 0x54, 0x8b, 0xff, 0x4f, 0xcd, 0xa6, 0x69, 0x4c,
	0x9b, 0xb0, 0x09, 0xa6, 0x49, 0x7b, 0xd3, 0x44, 0x85, 0x50, 0x23, 0x22, 0x5d, 0x8c, 0xb7, 0x64,
	0x91, 0x71, 0xa5, 0xa5, 0x3b, 0xd3, 0x99, 0x55, 0x62, 0xda, 0xe7, 0x68, 0x7a, 0xdf, 0x97, 0xf1,
	0xd2, 0x27, 0x68, 0x5a, 0x7d, 0x91, 0x66, 0x66, 0x76, 0x97, 0x45, 0x28, 0x21, 0xd8, 0xab, 0x9d,
	0x39, 0xdf, 0x39, 0xe7, 0x3b, 0xdf, 0xcc, 0xd9, 0xb3, 0x0b, 0xc5, 0xa1, 0xe3, 0x3b, 0x74, 0x60,
	0xa9, 0x47, 0x8d, 0x32, 0xe2, 0x13, 0x94, 0x56, 0xbb, 0x4a, 0xc9, 0x25, 0x2e, 0x91, 0x26, 0x4b,
	0xac, 0x14, 0x5a, 0xd9, 0xbd, 0x21, 0xde, 0xed, 0xc8, 0xa5, 0x03, 0x2b, 0x5c, 0x04, 0x40, 0x19,
	0x33, 0x46, 0x18, 0x1d, 0x58, 0xc1, 0x33, 0x30, 0x7f, 0xca, 0x7d, 0xc2, 0x1c, 0x17, 0xd3, 0x81,
	0x15, 0xad, 0x14, 0x64, 0x56, 0x20, 0xdd, 0xc2, 0xbe, 0x8d, 0x7f, 0x41, 0x05, 0xd0, 0x7f, 0xc2,
	0x8f, 0x7b, 0xda, 0x81, 0x76, 0x98, 0xb3, 0xc5, 0xd2, 0x6c, 0xc2, 0xa6, 0xc4, 0x38, 0x45, 0x25,
	0xd8, 0x78, 0x70, 0xc6, 0xf7, 0x38, 0x80, 0xd5, 0x06, 0x7d, 0x0e, 0x1b, 0x92, 0x68, 0x2f, 0x79,
	0xa0, 0x1d, 0x1a, 0xf5, 0x7c, 0x2d, 0xa4, 0x6d, 0x8a, 0xa7, 0xad, 0x40, 0xf3, 0x6b, 0x48, 0xf7,
	0x14, 0xc5, 0x57, 0x90, 0xa2, 0xce, 0x88, 0xc9, 0x24, 0x46, 0x7d, 0xa7, 0x36, 0x2d, 0xe6, 0xfc,
	0xba, 0xeb, 0x8c, 0xd8, 0x49, 0xea, 0xe9, 0xaf, 0xcf, 0x12, 0xb6, 0x74, 0x32, 0x2d, 0xd8, 0xec,
	0x05, 0xec, 0x11, 0x8f, 0xb6, 0x8c, 0xe7, 0x07, 0xd0, 0xdb, 0xc4, 0x9d, 0xd7, 0x81, 0xf6, 0x21,
	0x4b, 0xc6, 0xc3, 0xbe, 0x12, 0x90, 0x94, 0xf6, 0x0c, 0x19, 0x0f, 0xaf, 0xa5, 0x86, 0x7d, 0xc8,
	0x7a, 0x78, 0x12, 0x80, 0xba, 0x02, 0x3d, 0x3c, 0x91, 0xa0, 0xc9, 0x20, 0x77, 0x4c, 0x29, 0xf6,
	0x86, 0x6d, 0xe2, 0x0a, 0x01, 0x47, 0x90, 0x71, 0x19, 0xb9, 0xa7, 0x7d, 0x8f, 0x04, 0xb5, 0xa0,
	0x5a, 0x74, 0x05, 0xa7, 0x72, 0xd1, 0x21, 0x81, 0x8a, 0x4d, 0xe9, 0xd9, 0x21, 0x28, 0x0f, 0x49,
	0xee, 0x49, 0xde, 0x94, 0x9d, 0xe4, 0x1e, 0xfa, 0x08, 0xfa, 0x98, 0xb8, 0x92, 0xcb, 0xa8, 0x1b,
	0xb5, 0xe0, 0xde, 0x05, 0x83, 0xb0, 0x9b, 0x57, 0xb0, 0x15, 0xe3, 0xe4, 0xf4, 0x3d, 0xa4, 0x7a,
	0x48, 0x6a, 0x9e, 0x42, 0xee, 0x7b, 0xec, 0x30, 0x7f, 0x80, 0x1d, 0x7f, 0x5d, 0x25, 0xe6, 0x8f,
	0xb0, 0x15, 0x4b, 0xb2, 0x6e, 0x69, 0xab, 0x75, 0xcd, 0xaf, 0x50, 0x6a, 0x61, 0xbf, 0xed, 0xf8,
	0x98, 0xfb, 0x3d, 0xcf, 0xa1, 0xfc, 0x8e, 0xac, 0x5d, 0x38, 0xaa, 0xc1, 0x06, 0x73, 0x3c, 0x17,
	0x07, 0x94, 0xb1, 0x88, 0x73, 0xfc, 0x68, 0x0b, 0x24, 0x88, 0x50, 0x6e, 0xe6, 0x9f, 0x1a, 0x94,
	0x17, 0xb0, 0xaf, 0xab, 0xd8, 0x82, 0x0c, 0x0f, 0x92, 0x04, 0x15, 0x14, 0x63, 0xbd, 0x1f, 0xe5,
	0x8f, 0x9c, 0xa6, 0x47, 0xa4, 0x2f, 0x3b, 0xa2, 0x2e, 0x64, 0x45, 0x91, 0xff, 0x5f, 0x6b, 0x9a,
	0xbf, 0x6b, 0x00, 0x61, 0xca, 0xf7, 0x75, 0xde, 0xaa, 0xed, 0x3e, 0x95, 0x9a, 0x5a, 0x26, 0xf5,
	0x37, 0xc8, 0xb7, 0x44, 0xfe, 0xd3, 0x3b, 0x71, 0x3f, 0x42, 0xef, 0xb7, 0x90, 0x17, 0xef, 0xad,
	0xaa, 0x6f, 0xe4, 0xdd, 0x86, 0x15, 0x16, 0xa7, 0x15, 0xca, 0x88, 0x33, 0xef, 0x96, 0xd8, 0x39,
	0x0f, 0x4f, 0xa2, 0x1d, 0xb2, 0x20, 0xcd, 0xb0, 0xc3, 0x89, 0xaa, 0x32, 0x5f, 0xdf, 0x0d, 0x8b,
	0x8a, 0x51, 0x5c, 0x3d, 0x52, 0x6c, 0x07, 0x6e, 0x26, 0x83, 0xed, 0x19, 0x76, 0x4e, 0xdf, 0x43,
	0xbf, 0x5a, 0xff, 0x77, 0xa1, 0x78, 0x81, 0x7d, 0xa7, 0x87, 0xd9, 0x03, 0x66, 0x71, 0xd9, 0x5b,
	0x82, 0xf7, 0x67, 0xec, 0x3b, 0xfd, 0xf1, 0x88, 0xfb, 0x7b, 0xda, 0x81, 0x7e, 0x68, 0xd4, 0xcb,
	0x53, 0xda, 0x0e, 0x19, 0xe2, 0xe3, 0xe1, 0x90, 0x61, 0xce, 0x6d, 0xc3, 0xc3, 0x13, 0x91, 0xa5,
	0x3d, 0xe2, 0xbe, 0x39, 0x81, 0xd2, 0x7c, 0x46, 0x29, 0x65, 0xdd, 0x94, 0xab, 0x49, 0xf9, 0xb2,
	0x33, 0x73, 0x7c, 0xe2, 0x64, 0x51, 0x0e, 0x32, 0xc7, 0x8d, 0x46, 0xbf, 0x73, 0xd9, 0x68, 0x16,
	0x12, 0x68, 0x1b, 0x0c, 0xbb, 0x79, 0x71, 0x79, 0xdd, 0x54, 0x06, 0x0d, 0xe5, 0x01, 0x3a, 0xcd,
	0x66, 0xa3, 0xdf, 0xeb, 0xb6, 0xcf, 0xae, 0x0a, 0x49, 0xe1, 0xde, 0xb8, 0x0c, 0x76, 0x7a, 0xfd,
	0x55, 0x07, 0xa3, 0xe1, 0x28, 0x25, 0xa3, 0x1b, 0x8c, 0xbe, 0x00, 0xbd, 0x85, 0x7d, 0x94, 0x8f,
	0xae, 0x51, 0x7e, 0x6d, 0x2a, 0xdb, 0x33, 0x7b, 0x4e, 0x85, 0x5f, 0x2f, 0xee, 0xd7, 0x7b, 0xe3,
	0x17, 0x7e, 0x6e, 0xbe, 0x81, 0x6c, 0x34, 0x81, 0x51, 0x29, 0x44, 0xe3, 0x1f, 0x82, 0x4a, 0x79,
	0x81, 0x55, 0x45, 0x46, 0x03, 0x72, 0x1a, 0x19, 0x1f, 0xbc, 0xd3, 0xc8, 0xd9, 0x49, 0xda, 0x85,
	0x9d, 0xb9, 0x81, 0x83, 0x3e, 0xc4, 0x14, 0xcc, 0x4d, 0xc2, 0xca, 0xc7, 0x25, 0x28, 0xa7, 0xa2,
	0xcb, 0xd5, 0xab, 0x8c, 0x76, 0xe2, 0x8e, 0xaa, 0x7e, 0xf4, 0xd6, 0xc4, 0x29, 0xfa, 0x0e, 0x8c,
	0xd8, 0x35, 0xa1, 0x4f, 0x16, 0xbc, 0x15, 0x22, 0x74, 0x77, 0xa1, 0x9d, 0x53, 0x74, 0x01, 0x85,
	0xb7, 0xfd, 0x85, 0xf6, 0x43, 0xe7, 0x05, 0xbd, 0x5c, 0xf9, 0xf0, 0xdf, 0x20, 0xa7, 0x27, 0xa5,
	0xe7, 0x7f, 0xaa, 0x89, 0xa7, 0x97, 0xaa, 0xf6, 0xfc, 0x52, 0xd5, 0xfe, 0x7e, 0xa9, 0x6a, 0x7f,
	0xbc, 0x56, 0x13, 0x83, 0xb4, 0xfc, 0x6d, 0x39, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x03, 0xcd,
	0x1c, 0xf8, 0x36, 0x09, 0x00, 0x00,
}
